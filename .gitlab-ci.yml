stages:
  - containers
  - builds
  - sanity_checks

.multilib: &multilib |
  dpkg_architecture=$(which dpkg-architecture 2>/dev/null || true)
  rpm=$(which rpm 2>/dev/null || true)
  if test -x "$dpkg_architecture"; then
    multilib=$(dpkg-architecture -q DEB_TARGET_MULTIARCH);
  elif test -x "$rpm"; then
    multilib=$(rpm --eval '%{_lib}');
  fi

.native-environment: &native-environment |
  export VIRT_PREFIX="$HOME/build/libvirt"
  export PATH="$VIRT_PREFIX/bin:$PATH"
  export C_INCLUDE_PATH="$VIRT_PREFIX/include"
  export LD_LIBRARY_PATH="$VIRT_PREFIX/$multilib"
  export PKG_CONFIG_PATH="$VIRT_PREFIX/$multilib/pkgconfig"
  export XDG_DATA_DIRS="$VIRT_PREFIX/share:/usr/share:/usr/local/share"
  export GI_TYPELIB_PATH="$VIRT_PREFIX/$multilib/girepository-1.0"
  export OSINFO_SYSTEM_DIR="$VIRT_PREFIX/share/osinfo"
  export CCACHE_BASEDIR="$(pwd)"
  export CCACHE_DIR="$CCACHE_BASEDIR/ccache"
  export CCACHE_MAXSIZE="50M"
  export PATH="$CCACHE_WRAPPERSDIR:$PATH"

.mingw-environment: &mingw-environment |
  export VIRT_PREFIX="$VIRT_PREFIX/$ABI/sys-root/mingw"
  export PKG_CONFIG_PATH="$VIRT_PREFIX/lib/pkgconfig"

.native_build_job:
  extends:
    - .gitlab_native_build_job
  cache:
    paths:
      - ccache
    key: "$CI_JOB_NAME"
  script:
    - *multilib
    - *native-environment
    - mkdir build
    - cd build
    - meson .. . --prefix=$VIRT_PREFIX --werror || ( cat meson-logs/meson-log.txt; exit 1 )
    - $NINJA install
    - $NINJA test
    - $NINJA dist
    - if test -x /usr/bin/rpmbuild && test "$RPM" != "skip";
      then
        rpmbuild --nodeps --define '_without_mingw 1' -ta meson-dist/*.tar.xz;
      fi

.cross_build_job:
  extends:
    - .gitlab_cross_build_job
  cache:
    paths:
      - ccache
    key: "$CI_JOB_NAME"
  script:
    - *multilib
    - *native-environment
    - *mingw-environment
    - mkdir build
    - cd build
    - meson .. . $MESON_OPTS --prefix=$VIRT_PREFIX --werror || ( cat meson-logs/meson-log.txt; exit 1 )
    - $NINJA
    - $NINJA install

include: '/ci/gitlab.yml'
